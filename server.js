// Generated by CoffeeScript 1.10.0
(function() {
  var Client, QueryString, Summary, app, async, express, fixarrays, fixjson, getGame, handleRequest, http, request, startApp, startServer, testSummary, url;

  http = require('http');

  async = require('async');

  url = require('url');

  Client = require('node-rest-client').Client;

  request = require('request');

  Summary = require('./summary.js').Summary;

  express = require('express');

  app = express();

  QueryString = (function() {
    function QueryString(queryString) {
      var key, pair, value;
      this.queryString = queryString;
      this.variables = this.queryString.split('&');
      this.pairs = (function() {
        var l, len, ref, ref1, results;
        ref = this.variables;
        results = [];
        for (l = 0, len = ref.length; l < len; l++) {
          pair = ref[l];
          results.push((ref1 = pair.split('='), key = ref1[0], value = ref1[1], ref1));
        }
        return results;
      }).call(this);
    }

    QueryString.prototype.get = function(name) {
      var key, l, len, ref, ref1, value;
      ref = this.pairs;
      for (l = 0, len = ref.length; l < len; l++) {
        ref1 = ref[l], key = ref1[0], value = ref1[1];
        if (key === name) {
          return value;
        }
      }
    };

    return QueryString;

  })();

  fixarrays = function(g) {
    var i, index, j, k, l, len, m, n, o, ref, ref1, ref2, t, v, xo, xt;
    g.standings = [];
    g.turns = [];
    for (i = l = 0, ref = g.numberOfTurns; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
      g.standings.push(g["standing" + i]);
      delete g["standing" + i];
    }
    for (i = m = 0, ref1 = g.numberOfTurns - 1; 0 <= ref1 ? m <= ref1 : m >= ref1; i = 0 <= ref1 ? ++m : --m) {
      t = g["turn" + i];
      xt = {
        date: null,
        orders: []
      };
      index = 0;
      for (j = n = 0, len = t.length; n < len; j = ++n) {
        o = t[j];
        if (j === 0) {
          xt.date = o.date;
        } else {
          xo = {
            type: Object.keys(o)[0],
            index: index
          };
          ref2 = o[xo.type];
          for (k in ref2) {
            v = ref2[k];
            xo[k] = v;
          }
          xt.orders.push(xo);
          index++;
        }
      }
      g.turns.push(xt);
      delete g["turn" + i];
    }
    return g;
  };

  fixjson = function(json) {
    var bc, i, j, o, start, t, w;
    json = json.split(',').join(' ,');
    j = json;
    t = j;
    t = t.split(/\s+/);
    w = [];
    o = "";
    i = 0;
    while (i < t.length) {
      o += i + ": " + t[i] + "\n";
      i++;
    }
    i = 0;
    while (i < t.length) {
      if (t[i].match(/"turn\d+"/)) {
        w.push(t[i]);
        w.push(':');
        w.push('[');
        w.push('{');
        bc = 0;
        i += 3;
        while (!((t[i] === '}') && (bc === 0))) {
          start = i;
          if ((t[i] === ',') && (bc === 0)) {
            w.push('}');
            w.push(',');
            w.push('{');
          } else {
            if (t[i] === '{') {
              bc++;
            }
            if (t[i] === '}') {
              bc--;
            }
            w.push(t[i]);
          }
          i++;
        }
        w.push('}');
        w.push(']');
      } else {
        w.push(t[i]);
      }
      i++;
    }
    j = w.join(' ');
    j = JSON.parse(j);
    j = fixarrays(j);
    j = JSON.stringify(j, null, 4);
    return j;
  };

  getGame = function(id, callback) {
    var args, response;
    args = {
      url: "http://warlight.net/API/Gamefeed.aspx?gameid=" + id + "&gethistory=true",
      method: "POST",
      headers: {
        'Content-Type': 'text/plain'
      },
      body: "Email=dan.bellandi%40gmail.com&APIToken=YUKScGQ1llHQCD%40OrNslw5R9kCxPJCe%23Y0e81"
    };
    return response = request(args, function(error, response, body) {
      console.log("response finished");
      return callback(fixjson(body.toString()));
    });
  };

  handleRequest = function(req, res) {
    var qry, uri;
    try {
      uri = url.parse(req.url);
      if (!uri.query) {
        return;
      }
      qry = new QueryString(uri.query);
      console.log(uri.toString());
      if (uri.pathname === '/game') {
        getGame(qry.get('id'), function(output) {
          res.writeHead(200, {
            'Content-Type': 'application/json'
          });
          return res.end(output);
        });
      } else if (uri.pathname === '/summary') {
        getGame(qry.get('id'), function(output) {
          var error, error1, summary;
          try {
            summary = new Summary(output);
            res.writeHead(200, {
              'Content-Type': 'text/plain'
            });
            return res.end(summary.getText());
          } catch (error1) {
            error = error1;
            console.log("error");
            console.log(error);
            res.writeHead(500);
            return res.end(error.toString());
          } finally {

          }
        });
      }
      return console.log("url: " + req.url);
    } catch (undefined) {}
  };

  startServer = function() {
    var runPort;
    runPort = process.env.PORT || 8080;
    http.createServer(handleRequest).listen(runPort);
    return console.log("Server running on " + runPort);
  };

  app.get(/.*/, function(req, res) {
    console.log("request: " + req.url);
    return handleRequest(req, res);
  });

  startApp = function() {
    var server;
    return server = app.listen(process.env.PORT || 8080, function() {
      var host, port;
      host = server.address().address;
      port = server.address().port;
      return console.log("app listening at http://" + host + ":" + port);
    });
  };

  testSummary = function() {
    return getSummary(0, function(output) {
      output;
      var summary;
      summary = new Summary(output);
      return summary;
    });
  };

  startApp();

}).call(this);

//# sourceMappingURL=server.js.map
